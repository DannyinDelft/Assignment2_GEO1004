#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <cmath>
#include <iomanip>
#include <optional>
#include <algorithm>
#include <map>
#include <sstream>
#include <set>
#include "json.hpp"

using json = nlohmann::json;

// ------------------ Constants ------------------
const double HORIZONTAL_THRESHOLD = 0.9;
const double PI = M_PI;

// ------------------ Utility Functions ------------------

double signed_volume(const std::vector<double>& a,
                     const std::vector<double>& b,
                     const std::vector<double>& c,
                     const std::vector<double>& d) {
    double ax = a[0] - d[0], ay = a[1] - d[1], az = a[2] - d[2];
    double bx = b[0] - d[0], by = b[1] - d[1], bz = b[2] - d[2];
    double cx = c[0] - d[0], cy = c[1] - d[1], cz = c[2] - d[2];
    return (ax * (by * cz - bz * cy) - ay * (bx * cz - bz * cx) + az * (bx * cy - by * cx)) / 6.0;
}

std::vector<double> get_point(const json& j, int idx) {
    std::vector<int> vi = j["vertices"][idx];
    double x = vi[0] * j["transform"]["scale"][0].get<double>() + j["transform"]["translate"][0].get<double>();
    double y = vi[1] * j["transform"]["scale"][1].get<double>() + j["transform"]["translate"][1].get<double>();
    double z = vi[2] * j["transform"]["scale"][2].get<double>() + j["transform"]["translate"][2].get<double>();
    return {x, y, z};
}

// Compute surface normal using cross product for triangles or Newell's method for polygons
std::optional<std::vector<double>> compute_normal(const std::vector<std::vector<double>>& pts) {
    if (pts.size() < 3) return std::nullopt;

    if (pts.size() == 3) {
        // Triangle: use cross product
        std::vector<double> u(3), v(3);
        for (int i = 0; i < 3; ++i) {
            u[i] = pts[1][i] - pts[0][i];
            v[i] = pts[2][i] - pts[0][i];
        }
        std::vector<double> n = {
                u[1] * v[2] - u[2] * v[1],
                u[2] * v[0] - u[0] * v[2],
                u[0] * v[1] - u[1] * v[0]
        };
        double len = std::sqrt(n[0]*n[0] + n[1]*n[1] + n[2]*n[2]);
        if (len == 0) return std::nullopt;
        return std::vector<double>{n[0]/len, n[1]/len, n[2]/len};
    } else {
        // Polygon: use Newell's method
        double nx = 0, ny = 0, nz = 0;
        for (size_t i = 0; i < pts.size(); ++i) {
            const auto& current = pts[i];
            const auto& next = pts[(i + 1) % pts.size()];
            nx += (current[1] - next[1]) * (current[2] + next[2]);
            ny += (current[2] - next[2]) * (current[0] + next[0]);
            nz += (current[0] - next[0]) * (current[1] + next[1]);
        }
        double norm = std::sqrt(nx * nx + ny * ny + nz * nz);
        if (norm == 0) return std::nullopt;
        return std::vector<double>{nx / norm, ny / norm, nz / norm};
    }
}

// Check if surface is horizontal based on Z-component of normal
bool is_horizontal(const std::vector<double>& normal) {
    return std::abs(normal[2]) > HORIZONTAL_THRESHOLD;
}

// Calculate azimuth angle from normal vector
double azimuth_from_normal(const std::vector<double>& normal) {
    double x = normal[0], y = normal[1];
    double angle_rad = std::atan2(x, y);
    double angle_deg = angle_rad * 180.0 / PI;
    return (angle_deg < 0) ? angle_deg + 360.0 : angle_deg;
}

// Map azimuth to compass direction
std::string azimuth_to_direction(double azimuth) {
    // Normalize azimuth to [0, 360) range
    while (azimuth < 0) azimuth += 360.0;
    while (azimuth >= 360.0) azimuth -= 360.0;

    if (azimuth >= 337.5 || azimuth < 22.5) return "N";
    else if (azimuth >= 22.5 && azimuth < 67.5) return "NE";
    else if (azimuth >= 67.5 && azimuth < 112.5) return "E";
    else if (azimuth >= 112.5 && azimuth < 157.5) return "SE";
    else if (azimuth >= 157.5 && azimuth < 202.5) return "S";
    else if (azimuth >= 202.5 && azimuth < 247.5) return "SW";
    else if (azimuth >= 247.5 && azimuth < 292.5) return "W";
    else if (azimuth >= 292.5 && azimuth < 337.5) return "NW";
    else return "N"; // fallback
}

// Calculate 3D polygon area using cross product method
double calculate_3d_polygon_area(const std::vector<std::vector<double>>& pts) {
    if (pts.size() < 3) return 0.0;

    std::vector<double> total_cross = {0.0, 0.0, 0.0};

    for (size_t i = 1; i < pts.size() - 1; ++i) {
        std::vector<double> v1 = {
                pts[i][0] - pts[0][0],
                pts[i][1] - pts[0][1],
                pts[i][2] - pts[0][2]
        };
        std::vector<double> v2 = {
                pts[i+1][0] - pts[0][0],
                pts[i+1][1] - pts[0][1],
                pts[i+1][2] - pts[0][2]
        };

        // Cross product
        total_cross[0] += v1[1] * v2[2] - v1[2] * v2[1];
        total_cross[1] += v1[2] * v2[0] - v1[0] * v2[2];
        total_cross[2] += v1[0] * v2[1] - v1[1] * v2[0];
    }

    double magnitude = std::sqrt(
            total_cross[0] * total_cross[0] +
            total_cross[1] * total_cross[1] +
            total_cross[2] * total_cross[2]
    );

    return magnitude * 0.5;
}

// Convert vertex indices to scaled coordinates for new CityObject
std::vector<std::vector<int>> convert_vertices_to_indices(const json& j,
                                                          const std::vector<int>& ring,
                                                          std::vector<std::vector<int>>& new_vertices) {
    std::vector<int> new_ring;

    for (int old_idx : ring) {
        // Get the original vertex
        std::vector<int> vertex = j["vertices"][old_idx];

        // Check if we already have this vertex in our new list
        int new_idx = -1;
        for (size_t i = 0; i < new_vertices.size(); ++i) {
            if (new_vertices[i] == vertex) {
                new_idx = i;
                break;
            }
        }

        // If not found, add it
        if (new_idx == -1) {
            new_vertices.push_back(vertex);
            new_idx = new_vertices.size() - 1;
        }

        new_ring.push_back(new_idx);
    }

    return {new_ring};
}

// ------------------ Semantic Analysis ------------------

struct SemanticSurfaceInfo {
    int semantic_index;
    std::string type;
    double b3_azimut = -1.0;  // -1 means not available
    bool has_b3_azimut = false;
    json original_semantic;
};

std::vector<SemanticSurfaceInfo> analyze_semantic_surfaces(const json& geometry) {
    std::vector<SemanticSurfaceInfo> surfaces;

    if (!geometry.contains("semantics") || !geometry["semantics"].contains("surfaces")) {
        return surfaces;
    }

    const auto& semantic_surfaces = geometry["semantics"]["surfaces"];

    for (size_t i = 0; i < semantic_surfaces.size(); ++i) {
        SemanticSurfaceInfo info;
        info.semantic_index = i;
        info.original_semantic = semantic_surfaces[i];
        info.type = semantic_surfaces[i]["type"].get<std::string>();

        if (semantic_surfaces[i].contains("b3_azimut")) {
            info.b3_azimut = semantic_surfaces[i]["b3_azimut"].get<double>();
            info.has_b3_azimut = true;
        }

        surfaces.push_back(info);
    }

    return surfaces;
}

// Count total RoofSurfaces in LoD 2.2 semantics only
int count_semantic_roof_surfaces_lod22(const json& j) {
    int total = 0;

    for (const auto& [obj_id, co] : j["CityObjects"].items()) {
        if (!co.contains("geometry")) continue;

        for (const auto& geom : co["geometry"]) {
            if (geom["type"] != "Solid") continue;

            // Only count RoofSurfaces from LoD 2.2 geometries
            if (!geom.contains("lod") || geom["lod"] != "2.2") {
                continue;
            }

            auto surfaces = analyze_semantic_surfaces(geom);
            for (const auto& surface : surfaces) {
                if (surface.type == "RoofSurface") {
                    total++;
                }
            }
        }
    }

    return total;
}

// ------------------ Individual RoofSurface Processing ------------------

struct RoofSurfaceInfo {
    std::string building_id;
    std::string surface_id;
    int surface_number;
    int semantic_index;
    std::string orientation;
    double area;
    double azimuth;
    double b3_azimut = -1.0;
    bool has_b3_azimut = false;
    std::vector<double> normal;
    std::vector<std::vector<double>> vertices;
    std::vector<int> vertex_indices;
    json original_semantic;
};

json create_roof_surface_cityobject(const RoofSurfaceInfo& roof_info,
                                    const std::vector<std::vector<int>>& vertices,
                                    const json& original_transform) {
    json roof_obj;

    // Set basic properties
    roof_obj["type"] = "GenericCityObject";
    roof_obj["attributes"]["building_id"] = roof_info.building_id;
    roof_obj["attributes"]["semantic_index"] = roof_info.semantic_index;
    roof_obj["attributes"]["surface_number"] = roof_info.surface_number;
    roof_obj["attributes"]["orientation"] = roof_info.orientation;
    roof_obj["attributes"]["area"] = roof_info.area;

    roof_obj["attributes"]["azimuth"] = roof_info.azimuth; // Always store computed azimuth

    if (roof_info.has_b3_azimut) {
        roof_obj["attributes"]["b3_azimut"] = roof_info.b3_azimut;
        double diff = std::abs(roof_info.azimuth - roof_info.b3_azimut);
        // Handle wrap-around case (e.g., 359° vs 1°)
        if (diff > 180.0) {
            diff = 360.0 - diff;
        }
        roof_obj["attributes"]["azimuth_difference"] = diff;
    }

    // Add normal vector as attributes
    roof_obj["attributes"]["normal_x"] = roof_info.normal[0];
    roof_obj["attributes"]["normal_y"] = roof_info.normal[1];
    roof_obj["attributes"]["normal_z"] = roof_info.normal[2];

    // Create geometry
    json geometry;
    geometry["type"] = "MultiSurface";
    geometry["lod"] = "2.2";

    // Create boundaries - single surface with single ring
    geometry["boundaries"] = json::array();
    geometry["boundaries"].push_back(json::array());
    geometry["boundaries"][0].push_back(roof_info.vertex_indices);

    // Create semantics - preserve original semantic data
    geometry["semantics"]["surfaces"] = json::array();
    json semantic_surface = roof_info.original_semantic;
    semantic_surface["orientation"] = roof_info.orientation;
    semantic_surface["area"] = roof_info.area;
    semantic_surface["azimuth"] = roof_info.azimuth; // Always store computed azimuth
    geometry["semantics"]["surfaces"].push_back(semantic_surface);

    geometry["semantics"]["values"] = json::array();
    geometry["semantics"]["values"].push_back(json::array());
    geometry["semantics"]["values"][0].push_back(0); // Reference to first (and only) semantic surface

    roof_obj["geometry"] = json::array();
    roof_obj["geometry"].push_back(geometry);

    return roof_obj;
}

void create_individual_roof_surface_objects(json& j, std::vector<RoofSurfaceInfo>& roof_surfaces) {
    std::cout << "\n=== Creating Individual RoofSurface CityObjects Based on LoD 2.2 Semantics ===" << std::endl;
    std::cout << "Reading RoofSurface count from LoD 2.2 geometries only..." << std::endl;

    // Count semantic surfaces by type for LoD 2.2 only
    std::map<std::string, int> lod22_semantic_counts;
    std::map<std::string, int> all_semantic_counts;

    for (const auto& [obj_id, co] : j["CityObjects"].items()) {
        if (!co.contains("geometry")) continue;

        for (const auto& geom : co["geometry"]) {
            if (geom["type"] != "Solid") continue;

            auto surfaces = analyze_semantic_surfaces(geom);
            bool is_lod22 = geom.contains("lod") && geom["lod"] == "2.2";

            for (const auto& surface : surfaces) {
                all_semantic_counts[surface.type]++;
                if (is_lod22) {
                    lod22_semantic_counts[surface.type]++;
                }
            }
        }
    }

    std::cout << "All LoD semantic surface counts:" << std::endl;
    for (const auto& [type, count] : all_semantic_counts) {
        std::cout << "  " << type << ": " << count << " surfaces (all LoD)" << std::endl;
    }

    std::cout << "\nLoD 2.2 semantic surface counts:" << std::endl;
    for (const auto& [type, count] : lod22_semantic_counts) {
        std::cout << "  " << type << ": " << count << " surfaces (LoD 2.2 only)" << std::endl;
    }

    int total_roof_semantics_lod22 = lod22_semantic_counts["RoofSurface"];
    std::cout << "\n-> Found " << total_roof_semantics_lod22 << " RoofSurface semantic definitions in LoD 2.2" << std::endl;
    std::cout << "-> Creating " << total_roof_semantics_lod22 << " individual CityObjects" << std::endl;

    // Map to track roof surface count per building
    std::map<std::string, int> building_roof_count;

    // Store original data
    auto original_vertices = j["vertices"];
    auto original_transform = j["transform"];

    std::cout << "\nProcessing each RoofSurface semantic..." << std::endl;

    for (auto& [obj_id, co] : j["CityObjects"].items()) {
        if (!co.contains("geometry")) continue;

        // Find the parent building for this object
        std::string building_id = obj_id;

        // If this object has a parent, find the root building
        for (auto& [parent_id, parent_co] : j["CityObjects"].items()) {
            if (parent_co["type"] == "Building" && parent_co.contains("children")) {
                for (const auto& child_id : parent_co["children"]) {
                    if (child_id.get<std::string>() == obj_id) {
                        building_id = parent_id;
                        break;
                    }
                }
            }
        }

        for (auto& geom : co["geometry"]) {
            if (geom["type"] != "Solid") continue;

            // ONLY process LoD 2.2 geometries
            if (!geom.contains("lod") || geom["lod"] != "2.2") {
                continue;
            }

            std::cout << "Processing LoD 2.2 geometry for object: " << obj_id << std::endl;

            // Analyze semantic surfaces for this geometry
            auto semantic_surfaces = analyze_semantic_surfaces(geom);

            // Process each shell
            for (size_t shell_idx = 0; shell_idx < geom["boundaries"].size(); ++shell_idx) {
                const auto& shell = geom["boundaries"][shell_idx];
                const auto& semantics = geom["semantics"]["values"][shell_idx];

                // Process each surface in the shell
                for (size_t surf_idx = 0; surf_idx < shell.size(); ++surf_idx) {
                    const auto& surface = shell[surf_idx];
                    int sem_index = semantics[surf_idx].get<int>();

                    // Check if this semantic index corresponds to a RoofSurface
                    if (sem_index >= semantic_surfaces.size() ||
                        semantic_surfaces[sem_index].type != "RoofSurface") {
                        continue; // Skip non-RoofSurface
                    }

                    const auto& roof_semantic = semantic_surfaces[sem_index];

                    // Increment roof surface count for this building
                    building_roof_count[building_id]++;
                    int surface_number = building_roof_count[building_id];

                    std::string surface_id = building_id + "-" + std::to_string(surface_number);

                    std::cout << "\n--- Processing " << surface_id << " (semantic index " << sem_index << ") ---" << std::endl;

                    // Process each ring of the surface (typically just the outer ring)
                    for (const auto& ring : surface) {
                        if (ring.size() < 3) continue;

                        // Get the actual 3D coordinates
                        std::vector<std::vector<double>> pts;
                        std::vector<int> vertex_indices;

                        for (int idx : ring) {
                            pts.push_back(get_point(j, idx));
                            vertex_indices.push_back(idx);
                        }

                        // Calculate surface normal
                        auto maybe_normal = compute_normal(pts);
                        if (!maybe_normal.has_value()) {
                            std::cout << "  Warning: Could not compute normal for surface" << std::endl;
                            continue;
                        }

                        std::vector<double> normal = maybe_normal.value();
                        std::cout << "  Normal vector: (" << std::fixed << std::setprecision(4)
                                  << normal[0] << ", " << normal[1] << ", " << normal[2] << ")" << std::endl;

                        // Determine orientation - but ALWAYS compute azimuth for comparison
                        std::string orientation;
                        double azimuth = azimuth_from_normal(normal); // Always compute azimuth

                        if (is_horizontal(normal)) {
                            orientation = "horizontal";
                            std::cout << "  Surface is HORIZONTAL" << std::endl;
                            std::cout << "  Computed azimuth: " << std::fixed << std::setprecision(2)
                                      << azimuth << "° from North (for horizontal surface)" << std::endl;
                        } else {
                            orientation = azimuth_to_direction(azimuth);
                            std::cout << "  Computed azimuth: " << std::fixed << std::setprecision(2)
                                      << azimuth << "° from North" << std::endl;
                        }

                        if (roof_semantic.has_b3_azimut) {
                            std::cout << "  b3_azimut: " << std::fixed << std::setprecision(2)
                                      << roof_semantic.b3_azimut << "° from North" << std::endl;
                            double diff = std::abs(azimuth - roof_semantic.b3_azimut);
                            // Handle wrap-around case (e.g., 359° vs 1°)
                            if (diff > 180.0) {
                                diff = 360.0 - diff;
                            }
                            std::cout << "  Difference: " << std::fixed << std::setprecision(2)
                                      << diff << "°" << std::endl;
                        }

                        std::cout << "  Orientation: " << orientation << std::endl;

                        // Calculate area
                        double area = calculate_3d_polygon_area(pts);
                        std::cout << "  Area: " << std::fixed << std::setprecision(2)
                                  << area << " square units" << std::endl;

                        // Update original semantic surface - always store azimuth
                        geom["semantics"]["surfaces"][sem_index]["orientation"] = orientation;
                        geom["semantics"]["surfaces"][sem_index]["area"] = area;
                        geom["semantics"]["surfaces"][sem_index]["azimuth"] = azimuth; // Always store computed azimuth

                        // Create roof surface info
                        RoofSurfaceInfo roof_info;
                        roof_info.building_id = building_id;
                        roof_info.surface_id = surface_id;
                        roof_info.surface_number = surface_number;
                        roof_info.semantic_index = sem_index;
                        roof_info.orientation = orientation;
                        roof_info.area = area;
                        roof_info.azimuth = azimuth;
                        roof_info.normal = normal;
                        roof_info.vertices = pts;
                        roof_info.vertex_indices = vertex_indices;
                        roof_info.original_semantic = roof_semantic.original_semantic;
                        roof_info.b3_azimut = roof_semantic.b3_azimut;
                        roof_info.has_b3_azimut = roof_semantic.has_b3_azimut;

                        // Create vertices array for this individual roof surface
                        std::vector<std::vector<int>> new_vertices;
                        convert_vertices_to_indices(j, ring, new_vertices);

                        // Update vertex indices for the new object (0-based for the new object)
                        std::vector<int> new_indices;
                        for (int i = 0; i < new_vertices.size(); ++i) {
                            new_indices.push_back(i);
                        }
                        roof_info.vertex_indices = new_indices;

                        // Create new CityObject for this roof surface
                        json roof_obj = create_roof_surface_cityobject(roof_info, new_vertices, original_transform);

                        // Add vertices to the individual roof surface object
                        roof_obj["vertices"] = new_vertices;
                        roof_obj["transform"] = original_transform;

                        std::cout << "  ✓ Created CityObject with " << new_vertices.size() << " vertices" << std::endl;

                        // Add the new CityObject to the main JSON
                        j["CityObjects"][surface_id] = roof_obj;
                        roof_surfaces.push_back(roof_info);

                        // Only process the first (outer) ring
                        break;
                    }
                }
            }
        }
    }

    std::cout << "\nCreated " << roof_surfaces.size() << " individual roof surface CityObjects" << std::endl;
}

void print_roof_surface_summary(const std::vector<RoofSurfaceInfo>& roof_surfaces) {
    std::cout << "\n=== ROOF SURFACE SUMMARY ===" << std::endl;
    std::cout << "Total individual roof surfaces: " << roof_surfaces.size() << std::endl;

    // Group by building
    std::map<std::string, std::vector<const RoofSurfaceInfo*>> buildings;
    for (const auto& roof : roof_surfaces) {
        buildings[roof.building_id].push_back(&roof);
    }

    std::cout << "\nPer-building breakdown:" << std::endl;
    for (const auto& [building_id, surfaces] : buildings) {
        std::cout << "\nBuilding: " << building_id << " (" << surfaces.size() << " roof surfaces)" << std::endl;

        for (const auto* surface : surfaces) {
            std::cout << "  " << surface->surface_id
                      << " (semantic " << surface->semantic_index << "): "
                      << surface->orientation;
            std::cout << " (" << std::fixed << std::setprecision(1)
                      << surface->azimuth << "°)";
            if (surface->has_b3_azimut) {
                std::cout << " [b3: " << std::fixed << std::setprecision(1)
                          << surface->b3_azimut << "°]";
            }
            std::cout << ", Area: " << std::fixed << std::setprecision(2)
                      << surface->area << " sq units" << std::endl;
        }
    }

    std::cout << "\nOrientation distribution:" << std::endl;
    std::map<std::string, int> orientation_count;
    for (const auto& roof : roof_surfaces) {
        orientation_count[roof.orientation]++;
    }

    for (const auto& [orientation, count] : orientation_count) {
        std::cout << "  " << orientation << ": " << count << " surfaces" << std::endl;
    }

    // Azimuth comparison statistics - now includes ALL surfaces
    if (std::any_of(roof_surfaces.begin(), roof_surfaces.end(),
                    [](const auto& r) { return r.has_b3_azimut; })) {
        std::cout << "\nAzimuth comparison with b3_azimut (ALL surfaces):" << std::endl;
        double total_diff = 0.0;
        int count = 0;
        for (const auto& roof : roof_surfaces) {
            if (roof.has_b3_azimut) {
                double diff = std::abs(roof.azimuth - roof.b3_azimut);
                // Handle wrap-around case (e.g., 359° vs 1°)
                if (diff > 180.0) {
                    diff = 360.0 - diff;
                }
                total_diff += diff;
                count++;
                std::cout << "  " << roof.surface_id << ": "
                          << std::fixed << std::setprecision(2) << diff << "° difference" << std::endl;
            }
        }
        if (count > 0) {
            std::cout << "  Average difference: " << std::fixed << std::setprecision(2)
                      << (total_diff / count) << "°" << std::endl;
        }
    }
}

// ------------------ Main Processing Functions ------------------

void process_roof_surfaces(json& j) {
    std::vector<RoofSurfaceInfo> roof_surfaces;

    // Create individual roof surface CityObjects based on semantic definitions
    create_individual_roof_surface_objects(j, roof_surfaces);

    // Print summary
    print_roof_surface_summary(roof_surfaces);
}

// ------------------ Main Function ------------------

int main(int argc, const char* argv[]) {
    //const char* filename = (argc > 1) ? argv[1] : "10-282-562.city.json";
    const char* filename = (argc > 1) ? argv[1] : "nextbk_2b.city.json";
    std::cout << "========================================" << std::endl;
    std::cout << "LoD 2.2 RoofSurface Processor" << std::endl;
    std::cout << "Processing: " << filename << std::endl;
    std::cout << "========================================" << std::endl;

    // Read input file
    std::ifstream input(filename);
    if (!input.is_open()) {
        std::cerr << "Error: Could not open file " << filename << std::endl;
        return 1;
    }

    json j;
    try {
        input >> j;
    } catch (const std::exception& e) {
        std::cerr << "Error parsing JSON: " << e.what() << std::endl;
        return 1;
    }
    input.close();

    std::cout << "Initial CityObjects count: " << j["CityObjects"].size() << std::endl;

    // Count semantic RoofSurfaces in LoD 2.2 only (the actual number we want)
    int semantic_roof_count = count_semantic_roof_surfaces_lod22(j);
    std::cout << "LoD 2.2 RoofSurface definitions: " << semantic_roof_count << std::endl;

    // Process roof surfaces based on semantic definitions
    process_roof_surfaces(j);

    std::cout << "\nFinal CityObjects count: " << j["CityObjects"].size() << std::endl;

    // Additional processing (volume calculation, etc.)
    std::vector<double> fake_point = {0.0, 0.0, -1000.0};
    int nobuildings = 0;

    std::cout << "\n=== Building Volume Calculation ===" << std::endl;
    for (auto& [id, co] : j["CityObjects"].items()) {
        if (co["type"] != "Building") continue;

        double total_volume = 0.0;
        int total_tetrahedra = 0;
        std::vector<std::vector<double>> roof_normals;

        std::cout << "\nDecomposing building: " << id << std::endl;

        if (!co.contains("children")) continue;
        for (const auto& child_id : co["children"]) {
            if (!j["CityObjects"].contains(child_id.get<std::string>())) continue;
            const auto& child = j["CityObjects"][child_id.get<std::string>()];
            for (const auto& geom : child["geometry"]) {
                if (geom["type"] != "Solid" || geom["lod"] != "2.2") continue;

                for (size_t i = 0; i < geom["boundaries"].size(); ++i) {
                    const auto& shell = geom["boundaries"][i];
                    const auto& semantics = geom["semantics"]["values"][i];

                    for (size_t j_idx = 0; j_idx < shell.size(); ++j_idx) {
                        const auto& surface = shell[j_idx];
                        int sem_index = semantics[j_idx].get<int>();
                        std::string sem_type = geom["semantics"]["surfaces"][sem_index]["type"];

                        for (const auto& ring : surface) {
                            if (ring.size() < 3) continue;

                            std::vector<std::vector<double>> pts;
                            for (int idx : ring) {
                                pts.push_back(get_point(j, idx));
                            }

                            if (sem_type == "RoofSurface") {
                                auto maybe_normal = compute_normal(pts);
                                if (maybe_normal.has_value()) {
                                    roof_normals.push_back(maybe_normal.value());
                                }
                            }

                            for (size_t i = 1; i + 1 < pts.size(); ++i) {
                                double vol = signed_volume(pts[0], pts[i], pts[i + 1], fake_point);
                                total_volume += vol;
                                total_tetrahedra++;
                            }
                        }
                    }
                }
            }
        }

        std::cout << " Total tetrahedra: " << total_tetrahedra << std::endl;
        std::cout << " Computed volume for building " << id << ": " << std::abs(total_volume) << std::endl;

        j["CityObjects"][id]["attributes"]["volume"] = std::abs(total_volume);

        if (!roof_normals.empty()) {
            double avg_nx = 0, avg_ny = 0, avg_nz = 0;
            for (const auto& n : roof_normals) {
                avg_nx += n[0];
                avg_ny += n[1];
                avg_nz += n[2];
            }
            double len = std::sqrt(avg_nx * avg_nx + avg_ny * avg_ny + avg_nz * avg_nz);
            if (len > 0) {
                std::vector<double> avg_normal = {avg_nx / len, avg_ny / len, avg_nz / len};
                double azimuth = azimuth_from_normal(avg_normal);
                std::cout << " Average roof azimuth: " << azimuth << " degrees from North" << std::endl;
                j["CityObjects"][id]["attributes"]["roof_azimuth_deg"] = azimuth;
            }
        }

        nobuildings++;
    }

    std::cout << "\nProcessed " << nobuildings << " buildings for volume calculation." << std::endl;
    std::cout << "Number of vertices: " << j["vertices"].size() << std::endl;

    // Write output file
    std::ofstream o("out.city.json");
    if (!o.is_open()) {
        std::cerr << "Error: Could not create output file" << std::endl;
        return 1;
    }

    o << j.dump(2) << std::endl;
    o.close();

    std::cout << "\n========================================" << std::endl;
    std::cout << "Output written to: out.city.json" << std::endl;
    std::cout << "=== PROCESSING COMPLETE ===" << std::endl;
    std::cout << "========================================" << std::endl;

    return 0;
}
