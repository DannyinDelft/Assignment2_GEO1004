#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <cmath>
#include <iomanip>
#include "json.hpp"

using json = nlohmann::json;

double signed_volume(const std::vector<double>& a,
                     const std::vector<double>& b,
                     const std::vector<double>& c,
                     const std::vector<double>& d) {
    double ax = a[0] - d[0], ay = a[1] - d[1], az = a[2] - d[2];
    double bx = b[0] - d[0], by = b[1] - d[1], bz = b[2] - d[2];
    double cx = c[0] - d[0], cy = c[1] - d[1], cz = c[2] - d[2];

    return (ax * (by * cz - bz * cy)
            - ay * (bx * cz - bz * cx)
            + az * (bx * cy - by * cx)) / 6.0;
}

std::vector<double> get_point(const json& j, int idx) {
    std::vector<int> vi = j["vertices"][idx];
    double x = vi[0] * j["transform"]["scale"][0].get<double>() + j["transform"]["translate"][0].get<double>();
    double y = vi[1] * j["transform"]["scale"][1].get<double>() + j["transform"]["translate"][1].get<double>();
    double z = vi[2] * j["transform"]["scale"][2].get<double>() + j["transform"]["translate"][2].get<double>();
    return {x, y, z};
}

void visit_roofsurfaces(json &j) {
    for (auto& co : j["CityObjects"].items()) {
        for (auto& g : co.value()["geometry"]) {
            if (g["type"] == "Solid") {
                for (int i = 0; i < g["boundaries"].size(); i++) {
                    for (int j = 0; j < g["boundaries"][i].size(); j++) {
                        int sem_index = g["semantics"]["values"][i][j];
                        if (g["semantics"]["surfaces"][sem_index]["type"].get<std::string>() == "RoofSurface") {
                            std::cout << "RoofSurface: " << g["boundaries"][i][j] << std::endl;
                        }
                    }
                }
            }
        }
    }
}

int get_no_roof_surfaces(json &j) {
    int total = 0;
    for (auto& co : j["CityObjects"].items()) {
        for (auto& g : co.value()["geometry"]) {
            if (g["type"] == "Solid") {
                for (auto& shell : g["semantics"]["values"]) {
                    for (auto& s : shell) {
                        if (g["semantics"]["surfaces"][s.get<int>()]["type"].get<std::string>() == "RoofSurface") {
                            total++;
                        }
                    }
                }
            }
        }
    }
    return total;
}

void list_all_vertices(const json& j) {
    for (const auto& co : j["CityObjects"].items()) {
        std::cout << "= CityObject: " << co.key() << std::endl;
        for (const auto& g : co.value()["geometry"]) {
            if (g["type"] == "Solid") {
                for (const auto& shell : g["boundaries"]) {
                    for (const auto& surface : shell) {
                        for (const auto& ring : surface) {
                            std::cout << "---" << std::endl;
                            for (const auto& v : ring) {
                                std::vector<int> vi = j["vertices"][v.get<int>()];
                                double x = vi[0] * j["transform"]["scale"][0].get<double>() + j["transform"]["translate"][0].get<double>();
                                double y = vi[1] * j["transform"]["scale"][1].get<double>() + j["transform"]["translate"][1].get<double>();
                                double z = vi[2] * j["transform"]["scale"][2].get<double>() + j["transform"]["translate"][2].get<double>();
                                std::cout << std::setprecision(2) << std::fixed << v << " (" << x << ", " << y << ", " << z << ")" << std::endl;
                            }
                        }
                    }
                }
            }
        }
    }
}

int main(int argc, const char* argv[]) {
    const char* filename = (argc > 1) ? argv[1] : "nextbk_2b.city.json";

    std::cout << "Processing: " << filename << std::endl;
    std::ifstream input(filename);
    json j;
    input >> j;
    input.close();

    int noroofsurfaces = get_no_roof_surfaces(j);
    std::cout << "Total RoofSurface: " << noroofsurfaces << std::endl;

    list_all_vertices(j);
    visit_roofsurfaces(j);

    std::vector<double> fake_point = {0.0, 0.0, -1000.0};
    int nobuildings = 0;

    for (auto& [id, co] : j["CityObjects"].items()) {
        if (co["type"] != "Building") continue;

        double total_volume = 0.0;
        int total_tetrahedra = 0;
        std::cout << "Decomposing building: " << id << std::endl;

        if (!co.contains("children")) continue;
        for (const auto& child_id : co["children"]) {
            const auto& child = j["CityObjects"][child_id.get<std::string>()];
            for (const auto& geom : child["geometry"]) {
                if (geom["type"] != "Solid" || geom["lod"] != "2.2") continue;

                int shell_index = 0;
                for (const auto& shell : geom["boundaries"]) {
                    std::cout << " Shell " << shell_index++ << " has " << shell.size() << " surfaces." << std::endl;
                    for (const auto& surface : shell) {
                        std::cout << "  Surface has " << surface.size() << " rings." << std::endl;
                        for (const auto& ring : surface) {
                            if (ring.size() < 3) continue;
                            std::cout << "   Ring has " << ring.size() << " vertices." << std::endl;

                            std::vector<std::vector<double>> pts;
                            for (int idx : ring) {
                                pts.push_back(get_point(j, idx));
                            }

                            for (size_t i = 1; i + 1 < pts.size(); ++i) {
                                double vol = signed_volume(pts[0], pts[i], pts[i + 1], fake_point);
                                total_volume += vol;
                                total_tetrahedra++;
                            }
                        }
                    }
                }
            }
        }

        std::cout << " Total tetrahedra: " << total_tetrahedra << std::endl;
        std::cout << " Computed volume for building " << id << ": " << std::abs(total_volume) << std::endl;

        j["CityObjects"][id]["attributes"]["volume"] = std::abs(total_volume);
        nobuildings++;
    }

    std::cout << "Processed " << nobuildings << " buildings." << std::endl;
    std::cout << "Number of vertices " << j["vertices"].size() << std::endl;

    std::ofstream o("out.city.json");
    o << j.dump(2) << std::endl;
    o.close();

    return 0;
}
